"""
App Streamlit com diagn√≥stico de carregamento em tempo real
"""
import streamlit as st
import time
import os
from dotenv import load_dotenv

# Mostrar progresso imediatamente
st.set_page_config(page_title="Diagn√≥stico de Carregamento", layout="wide")
st.title("üîß Diagn√≥stico de Carregamento em Tempo Real")

# Criar um placeholder para o progresso
progress_placeholder = st.empty()
status_placeholder = st.empty()

def update_progress(step, message):
    """Atualiza o progresso na interface"""
    progress_placeholder.info(f"üîÑ Etapa {step}: {message}")
    status_placeholder.write(f"‚è±Ô∏è {time.strftime('%H:%M:%S')} - {message}")

# Iniciar diagn√≥stico
update_progress(1, "Iniciando diagn√≥stico...")

# Etapa 1: Carregar vari√°veis de ambiente
update_progress(1.1, "Carregando vari√°veis de ambiente...")
load_dotenv()
update_progress(1.2, "Vari√°veis de ambiente carregadas!")

# Etapa 2: Verificar vari√°veis cr√≠ticas
update_progress(2, "Verificando vari√°veis cr√≠ticas...")
supabase_url = os.environ.get("SUPABASE_URL")
supabase_key = os.environ.get("SUPABASE_KEY")

if supabase_url:
    st.success("‚úÖ SUPABASE_URL configurada")
else:
    st.warning("‚ö†Ô∏è SUPABASE_URL n√£o encontrada")

if supabase_key:
    st.success("‚úÖ SUPABASE_KEY configurada")
else:
    st.warning("‚ö†Ô∏è SUPABASE_KEY n√£o encontrada")

# Etapa 3: Imports progressivos
update_progress(3, "Iniciando imports...")

try:
    update_progress(3.1, "Importando bibliotecas b√°sicas...")
    import json
    import numpy as np
    from datetime import datetime
    st.success("‚úÖ Bibliotecas b√°sicas importadas")
except Exception as e:
    st.error(f"‚ùå Erro ao importar bibliotecas b√°sicas: {e}")

try:
    update_progress(3.2, "Importando Sentence Transformers...")
    from sentence_transformers import SentenceTransformer
    st.success("‚úÖ Sentence Transformers importado")
except Exception as e:
    st.error(f"‚ùå Erro ao importar Sentence Transformers: {e}")

try:
    update_progress(3.3, "Importando FAISS...")
    import faiss
    st.success("‚úÖ FAISS importado")
except Exception as e:
    st.error(f"‚ùå Erro ao importar FAISS: {e}")

# Etapa 4: Carregar modelo (se poss√≠vel)
update_progress(4, "Preparando carregamento do modelo...")
st.info("‚ÑπÔ∏è O carregamento do modelo pode levar alguns segundos...")

try:
    update_progress(4.1, "Carregando modelo de embeddings...")
    with st.spinner("Carregando modelo..."):
        model = SentenceTransformer('all-MiniLM-L6-v2')
    st.success("‚úÖ Modelo carregado com sucesso!")
    update_progress(4.2, "Modelo carregado!")
except Exception as e:
    st.error(f"‚ùå Erro ao carregar modelo: {e}")

# Etapa 5: Inicializar componentes
update_progress(5, "Inicializando componentes...")

try:
    update_progress(5.1, "Inicializando FAISS...")
    embedding_dim = 384
    index = faiss.IndexFlatL2(embedding_dim)
    st.success("‚úÖ FAISS inicializado")
except Exception as e:
    st.error(f"‚ùå Erro ao inicializar FAISS: {e}")

# Conclus√£o
update_progress(6, "Diagn√≥stico conclu√≠do!")
progress_placeholder.success("‚úÖ Diagn√≥stico completo!")

st.divider()
st.subheader("üìä Resultados do Diagn√≥stico")
st.write("Se voc√™ est√° vendo esta p√°gina, o Streamlit est√° funcionando corretamente!")
st.write("O diagn√≥stico mostra onde o processo de carregamento pode estar travando.")

st.info("üí° Esta √© uma vers√£o de diagn√≥stico. Se o carregamento normal travar, use esta p√°gina para identificar o problema.")